@import "../../components/icons";

$clear-button-default-active: rgba($black, 0.1);

$clear-button-palette: (
  default: ( normal: get-color(royal), active: $clear-button-default-active, hover: get-color(royal-x-light) ),
  success: ( normal: get-color(success), hover: get-color(success-x-light)),
  medium: ( normal: get-color(medium), hover: get-color(extra-light))
);

// important! is allowed here because active states must overrride
// hover states
.button { //sass-lint:disable-block no-important
  align-items: center;
  display: inline-flex;
  font-weight: bold;
  line-height: 1.2;
  text-decoration: none;

  .button-group--spaced & {
    margin: 0 5%;
  }

  & > .icon {
    margin-right: 0.85rem;
  }

  &.icon-only > .icon {
    margin-right: 0;
  }

  &:active {
    box-shadow: none !important;
    outline: none;
    transform: translateY(2px);
  }

  &:hover,
  &:focus {
    outline: none;
  }

  &.primary {
    &:active {
      background: get-color(primary) !important;
    }

    &:hover,
    &:focus {
      box-shadow: 0 4px 16px 0 rgba(get-color(royal), 0.6);
    }
  }

  &.secondary {
    &:active {
      background: get-color(primary) !important;
      color: $button-color;
    }

    &:hover,
    &:focus {
      background: $button-color-alt;
      color: $button-color;
    }
  }

  &.alert {
    background: get-color(alert-x-light) !important;
    color: get-color(alert);

    &:active {
      background: get-color(alert) !important;
      color: $button-color;
    }

    &:hover,
    &:focus {
      background: get-color(alert) !important;
      color: $button-color;

      &.icon-only > .icon {
        @include icon-fill(get-color(alert-x-light));
      }
    }

    &.icon-only > .icon {
      @include icon-fill(get-color(alert));
    }
  }

  &.success {
    background: get-color(success-x-light) !important;
    color: get-color(success);

    &:active {
      background: get-color(success) !important;
      color: $button-color;
    }

    &:hover,
    &:focus {
      background: get-color(success) !important;
      color: $button-color;

      &.icon-only > .icon {
        @include icon-fill(get-color($button-color));
      }
    }

    &.icon-only > .icon {
      @include icon-fill(get-color(success));
    }
  }

  &.clear {
    @each $name, $states in $clear-button-palette {
      &.#{$name} {
        color: map-get($states, normal);
        &:active { background: (map-get($states, active) or $clear-button-default-active); }

        &:hover,
        &:focus {
          background: map-get($states, hover);
        }

      }
    }

    &:active {
      background: map-get(map-get($clear-button-palette, default), active) !important;
    }

    &:hover,
    &:focus {
      background: map-get(map-get($clear-button-palette, default), hover);
    }
  }
}

.button-group {
  flex: wrap;

  &--spaced {
    justify-content: center;
    margin: $global-margin 0 2 * $global-margin;
  }

  &--reversed {
    flex-direction: row-reverse;
  }
}
